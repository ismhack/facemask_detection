%% PATH setup
addpath './training_data/';
addpath './new_test_data/';
load_mnist
%% calc averages
[rows, cols, number] = size(mnist_digits)

total2_count = size(find(mnist_labels ==2),1);
total3_count = size(find(mnist_labels ==3),1);

digits2 = zeros(rows*cols, total2_count);
digits3 = zeros(rows*cols, total3_count);
% set mean of all faces to 0, and std to 1.
for index = 1: number
    if(mnist_labels(index) ==2)
        digit = mnist_digits(:,:, index);
        digit = digit(:);
        digit = (digit - mean(digit)) / std(digit);
        digits2(:, index) = digit;
    end
    
    if(mnist_labels(index) ==3)
        digit = mnist_digits(:,:, index);
        digit = digit(:);
        digit = (digit - mean(digit)) / std(digit);
        digits3(:, index) = digit;
    end
end

average2 = [mean(digits2')]';

% center points
centered_points2 = zeros(rows * cols, total2_count);
for index = 1:(total2_count)
    centered_points2( :, index) = centered_points2(:, index) - average2;
end

% covariance

covariance_matrix2 = centered_points2 * centered_points2';

[eigenvectors, eigenvalues] = eig(covariance_matrix2);
% eigenvalues is a matrix, but only the diagonal matters, so we throw
% away the rest
eigenvalues = diag(eigenvalues);
[eigenvalues, indices] = sort(eigenvalues, 'descend');
eigenvectors = eigenvectors(:, indices);

figure(1); imshow(reshape(eigenvectors(:, 1),rows, cols), []);
figure(2); imshow(reshape(eigenvectors(:, 2),rows, cols), []);
figure(3); imshow(reshape(eigenvectors(:, 2),rows, cols), []);
figure(4); imshow(reshape(eigenvectors(:, 2),rows, cols), []);
figure(5); imshow(reshape(eigenvectors(:, 2),rows, cols), []);


[mean_face, eigenvectors_2, eigenvalues] = compute_pca(digits2); 

figure(6); imshow(reshape(eigenvectors(:, 1),rows, cols), []);
figure(7); imshow(reshape(eigenvectors(:, 2),rows, cols), []);
figure(8); imshow(reshape(eigenvectors(:, 2),rows, cols), []);
figure(9); imshow(reshape(eigenvectors(:, 2),rows, cols), []);
figure(10); imshow(reshape(eigenvectors(:, 2),rows, cols), []);


%% TEST detect digit
test = read_gray('test40.bmp');
[row, col] = detect_digit(test, average3);

%% TEST recognize digit all test data
correct =0;
wrong=0;
for i = 1:40
    test = read_gray(['test' num2str(i,'%d') '.bmp']);
    digit = recognize_digit(test, average2, average3);
    if( i < 20)
        if( digit == 2)
            correct = correct +1;
        else
            wrong = wrong + 1;
            fprintf('failed test%d.bmp \n',i);
        end
    else
         if( digit == 3)
            correct = correct +1;
        else
            wrong = wrong + 1;
            fprintf('failed test%d.bmp \n',i);
         end
    end

end

fprintf('recognize_digit: Correct %d - Failed: %d - Accuracy: %.2f ', correct,wrong, (correct/40)* 100);
%%

